<?php
/**
 * OpenSNS X
 * Copyright 2014-2020 http://www.thisky.com All rights reserved.
 * ----------------------------------------------------------------------
 * Author: 郑钟良(zzl@ourstu.com)
 * Date: 2019/5/24
 * Time: 15:39
 */

namespace app\osapi\controller;


use app\admin\model\group\Group;
use app\admin\model\group\Power;
use app\admin\model\invite\InviteLog;
use app\commonapi\model\Gong;
use app\osapi\model\user\LoginFaq as FaqModel;
use app\osapi\model\user\InviteCode;
use app\osapi\lib\File;
use app\osapi\lib\FlyPigeno;
use app\osapi\lib\ChuanglanSmsApi;
use app\osapi\model\com\ComForumMember;
use app\osapi\model\com\ComThread;
use app\osapi\model\user\UserFollow;
use app\osapi\model\user\UserModel;
use app\osapi\model\user\UserVerify;
use app\osapi\model\user\UserRank;
use app\osapi\model\user\UserTaskDay;
use app\osapi\model\user\UserTaskNew;
use app\osapi\model\com\Message;
use service\UtilService;
use think\Cache;
use app\admin\model\system\SystemConfig;
use service\WechatTemplateService;
use app\wap\model\user\WechatUser;
use app\osapi\model\common\Support;
use app\osapi\model\common\Blacklist;
use app\commonapi\controller\Sensitive;
use app\osapi\model\user\UserVisit;
use app\osapi\model\com\Report;
use app\wechat\sdk\WechatAuth;
use app\osapi\model\com\ComTopic;

class User extends Base
{

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {
        $data = db('user')->where('nickname','like','1')->select() ;
        $this->apiSuccess($data) ;
    }


    /**
     * 快捷登陆生成手机验证码并发送
     */
    public function quickVerify()
    {
        if (is_post()) {
            $account = input('post.phone', '', 'text');
            $send_type = input('post.send_type', '', 'text');
            /**解密 start**/
            $iv = "1234567890123412";//16位 向量
            $key= '201707eggplant99';//16位 默认秘钥
            $account=trim(openssl_decrypt(base64_decode($account),"AES-128-CBC",$key,OPENSSL_RAW_DATA,$iv));
            /**解密 end**/
            if (!isset($account)) {
                $this->apiError('请填写手机号');
            }
            if($send_type=='password'){
                $is_phone=UserModel::where('phone',$account)->find();
                if($is_phone){
                    $this->apiError('该手机号已注册');
                }
            }
            if($send_type=='bind'){
                $is_phone=UserModel::where('phone',$account)->find();
                if($is_phone){
                    $this->apiError('该手机号已被绑定');
                }
                $resend_time=5;
            }else{
                $resend_time = modC('sms_resend_time', 60);
            }
            if (time() <= Cache::get('verify_time_'.get_client_ip()) + $resend_time) {
                $this->apiError('60秒内请勿重复获取验证码');
            }
            Cache::set('verify_time_'.get_client_ip(), time());
            $aVerify = UserVerify::addData($account); //生成验证码
            if ($aVerify) {
                $sms_type = SystemConfig::getValue('sms_type');
                if($sms_type=='fg'){
                    $content = modC('sms_content');
                    $content = str_replace('{$verify}', $aVerify, $content); //根据短信模板添加验证码
                    $content = str_replace('{$account}', $account, $content); //根据短信模板添加手机号
                    $res = FlyPigeno::sendSMS($account, $content); //发送短信
                    if ($res===true) {
                        $this->apiSuccess('发送验证码成功');
                    } else {
                        Cache::rm('verify_time_'.get_client_ip());
                        $this->apiError($res);
                    }
                }else{
                    $config = SystemConfig::getMore('cl_sms_sign,cl_sms_template');
                    $content = str_replace('{s6}', $aVerify, $config['cl_sms_template']); //根据短信模板添加验证码
                    $content='【'.$config['cl_sms_sign'].'】'.$content;
                    $res = ChuanglanSmsApi::sendSMS($account,$content); //发送短信
                    $res=json_decode($res,true);
                    if ($res['code']==0) {
                        $this->apiSuccess('发送验证码成功');
                    } else {
                        Cache::rm('verify_time_'.get_client_ip());
                        $this->apiError($res['errorMsg']);
                    }
                }
            } else {
                Cache::rm('verify_time_'.get_client_ip());
                $this->apiError('生成验证码失败');
            }
        }
    }

    /**
     * 快捷登陆注册账号
     */
    public function quickRegister()
    {
        $aAccount = input('post.phone', '', 'text');
        $platform = input('post.platform', '','text');
        $inviteCode = input('post.invite_code', '','text');
        $type=input('post.type', 'phone','text');
        $aPassword=input('post.password', '','text');
        /**解密 start**/
        $iv = "1234567890123412";//16位 向量
        $key= '201707eggplant99';//16位 默认秘钥
        $aAccount=trim(openssl_decrypt(base64_decode($aAccount),"AES-128-CBC",$key,OPENSSL_RAW_DATA,$iv));
        if($aPassword){
            $aPassword=trim(openssl_decrypt(base64_decode($aPassword),"AES-128-CBC",$key,OPENSSL_RAW_DATA,$iv));
        }
        /**解密 end**/
        if (empty($aAccount)) {
            $this->apiError('请输入手机号');
        }
        preg_match("/^1[3456789][0-9]{9}$/", $aAccount, $match_phone);
        if (!$match_phone) {
            $this->apiError('请输入正确的手机号码');
        }
        $is_phone=UserModel::where('phone',$aAccount)->find();
        if($is_phone){
            $this->apiError('该手机号已注册');
        }
        if($type=='password'){
            if(preg_match('/^[0-9a-z_$]{6,14}$/i',$aPassword)){
                $is_password=1;
            }else{
                $this->apiError('密码不符合要求，请重新设置');
            }
        }else{
            $is_password=0;
        }
        $aPassword=md5($aPassword);
        do{
            $aNickname='U_'.create_rand(4,'all');
            $check_has = UserModel::where(['nickname'=>$aNickname,'status'=>1])->value('uid');
        }while($check_has);
        /* 注册用户 */
        $uid = UserModel::register($aAccount, $aNickname, $aPassword, 'osx', 'phone',$is_password);
        $fids=db('com_forum')->where('default_follow',1)->where('status',1)->column('id');
        foreach($fids as &$val){
            $data['uid']=$uid;
            $data['status']=1;
            $data['create_time']=time();
            $data['fid']=$val;
            db('com_forum_member')->insert($data);
        }
        unset($val);
        $data = [
            'uid' => $uid,
            'platform'=>$platform,
            'reg_time' => time(),
        ];
        db('stat_reg_info')->insert($data);
        //注册加分
        Gong::actionadd('zhuce','com_post','uidflag',$uid) ;
        //注册方式统计
        if (0 < $uid) {
            //邀请记录添加
            InviteCode::addInviteLog($inviteCode,$uid);
            $res = UserModel::login($uid, false); //登陆
            if ($res['success']==1) {
                $this->user_token = $res['token'];
                $data['token'] = $this->user_token;
                $data['token_time'] = $res['token_time'];
                $data['user'] = $res['user'];
                $this->apiSuccess($data);
            } else {
                //注册失败状态置为-2
                UserModel::setRegFalse($uid,-2);
                $this->apiError('注册失败');
            }
        } else { //注册失败，显示错误信息
            $this->apiError('注册失败');
        }
    }

    /**
     * 验证短信验证码并检查用户是否已注册
     */
    public function quickCheckVerify(){
        $aAccount = input('post.phone', '', 'text');
        $aRegVerify = input('post.quick_verify', '','text');
        //这个key用于获取站点号
        $register_key = input('post.register_key', '','text');
        /**解密 start**/
        $iv = "1234567890123412";//16位 向量
        $key= '201707eggplant99';//16位 默认秘钥
        $aAccount=trim(openssl_decrypt(base64_decode($aAccount),"AES-128-CBC",$key,OPENSSL_RAW_DATA,$iv));
        /**解密 end**/
        if (empty($aRegVerify)) {
            $this->apiError('请输入验证码');
        }
        $code=UserVerify::checkVerify($aAccount,'mobile', $aRegVerify);
        switch($code){
            case 1:
                $user=UserModel::where('phone',$aAccount)->find();
                if($user){
                    $data=UserModel::quickLogin($aAccount);
                    if($data===false){
                        $this->apiError('账号存在异常');
                    }
                }else{
                    $data['is_exit']=0;
                    $data['info']='不存在用户';
                }
                $this->apiSuccess($data);
                break;
            case -1:
                $data['is_exit']=-1;
                $data['info']='短信验证码错误';
                $this->apiError($data);
                break;
            case -2:
                $data['is_exit']=-2;
                $data['info']='短信验证码已过期';
                $this->apiError($data);
                break;
        }
    }


    /**
     * 验证短信验证码并解除绑定
     */
    public function CheckVerifyBindDel(){
        $aAccount = input('post.phone', '', 'text');
        $aRegVerify = input('post.quick_verify', '','text');
        //这个key用于获取站点号
        /**解密 start**/
        $iv = "1234567890123412";//16位 向量
        $key= '201707eggplant99';//16位 默认秘钥
        $aAccount=trim(openssl_decrypt(base64_decode($aAccount),"AES-128-CBC",$key,OPENSSL_RAW_DATA,$iv));
        /**解密 end**/
        if (empty($aRegVerify)) {
            $this->apiError('请输入验证码');
        }
        $code=UserVerify::checkVerify($aAccount,'mobile', $aRegVerify);
        switch($code){
            case 1:
                $data['info']='验证成功';
                $this->apiSuccess($data);
                break;
            case -1:
                $data['info']='短信验证码错误';
                $this->apiError($data);
                break;
            case -2:
                $data['info']='短信验证码已过期';
                $this->apiError($data);
                break;
        }
    }

    /**
     * 验证短信验证码并重新绑定手机
     */
    public function CheckVerifyBind(){
        $aAccount = input('post.phone', '', 'text');
        $aRegVerify = input('post.quick_verify', '','text');
        //这个key用于获取站点号
        /**解密 start**/
        $iv = "1234567890123412";//16位 向量
        $key= '201707eggplant99';//16位 默认秘钥
        $aAccount=trim(openssl_decrypt(base64_decode($aAccount),"AES-128-CBC",$key,OPENSSL_RAW_DATA,$iv));
        /**解密 end**/
        if (empty($aRegVerify)) {
            $this->apiError('请输入验证码');
        }
        $code=UserVerify::checkVerify($aAccount,'mobile', $aRegVerify);
        switch($code){
            case 1:
                $map['phone']=$aAccount;
                $uid=get_uid();
                $res=UserModel::where('uid',$uid)->update($map);
                if($res===false){
                    $data['info']='绑定手机失败';
                }else{
                    $data['info']='绑定手机成功';
                }
                $this->apiSuccess($data);
                break;
            case -1:
                $data['info']='短信验证码错误';
                $this->apiError($data);
                break;
            case -2:
                $data['info']='短信验证码已过期';
                $this->apiError($data);
                break;
        }
    }


    /**
     * 获取邀请码用户
     */
    public function getInviteCodeUser(){
        $inviteCode = input('post.invite_code', '','text');
        $inviteCode=substr($inviteCode,0,-1);
        $inviteCode=substr($inviteCode,1);
        $uid=InviteCode::where('code',$inviteCode)->value('uid');
        if(!$uid){
            $this->apiSuccess('该邀请码无效');
        }else{
            $userInfo=UserModel::getUserInfo($uid);
            $userInfo['website_name']=SystemConfig::getValue('website_name');
            $this->apiSuccess($userInfo);
        }
    }

    /**
     * 密码登陆
     */
    public function passwordLogin()
    {
        $aAccount = input('post.phone', '', 'text');
        $aPassword=input('post.password', '','text');
        /**解密 start**/
        $iv = "1234567890123412";//16位 向量
        $key= '201707eggplant99';//16位 默认秘钥
        $aAccount=trim(openssl_decrypt(base64_decode($aAccount),"AES-128-CBC",$key,OPENSSL_RAW_DATA,$iv));
        $aPassword=trim(openssl_decrypt(base64_decode($aPassword),"AES-128-CBC",$key,OPENSSL_RAW_DATA,$iv));
        /**解密 end**/
        $uid=db('user')->where('phone',$aAccount)->where('status',1)->find();
        if(!$uid){
            $this->apiError('账号不存在或被禁用');
        }
        if($aPassword==''){
            $this->apiError('请输入密码');
        }
        $aPassword=md5($aPassword);
        if($uid['is_password']==0){
            $this->apiError('密码错误');
        }
        if($uid['pwd']!=$aPassword){
            $this->apiError('密码错误');
        }
        $result = UserModel::doQuickLogin($uid['uid']); //状态码是1时候登录成功
        if ($result['status'] == 1) {
            $this->user_token = $result['token'];
            $data['token'] = $this->user_token;
            $data['token_time'] = $result['token_time'];
            $data['user'] = $result['user'];
            return $data;
        } else {
            $this->apiError($result);
        }
    }

    /**
     * 修改密码
     */
    public function passwordEdit()
    {
        $aAccount = input('post.phone', '', 'text');
        $aPassword=input('post.password', '','text');
        $now_uid=$this->_needLogin();
        /**解密 start**/
        $iv = "1234567890123412";//16位 向量
        $key= '201707eggplant99';//16位 默认秘钥
        $aAccount=trim(openssl_decrypt(base64_decode($aAccount),"AES-128-CBC",$key,OPENSSL_RAW_DATA,$iv));
        $aPassword=trim(openssl_decrypt(base64_decode($aPassword),"AES-128-CBC",$key,OPENSSL_RAW_DATA,$iv));
        /**解密 end**/
        $uid=db('user')->where('phone',$aAccount)->where('status',1)->find();
        if($now_uid!=$uid){
            $this->apiError('非法操作');
        }
        if($aPassword==''){
            $this->apiError('请输入密码');
        }
        if(preg_match('/^[0-9a-z_$]{6,14}$/i',$aPassword)){
            $data['pwd']=md5($aPassword);
        }else{
            $this->apiError('密码不符合要求，请重新设置');
        }
        $data['is_password']=1;
        $result = UserModel::where('uid',$uid['uid'])->update($data); //状态码是1时候登录成功
        if ($result !== false) {
            $this->apiSuccess('密码修改成功');
        } else {
            $this->apiError('密码修改失败');
        }
    }

    /**
     * 修改密码
     */
    public function forgetPassword()
    {
        $aAccount = input('post.phone', '', 'text');
        $aPassword=input('post.password', '','text');
        $aRegVerify = input('post.quick_verify', '','text');
        /**解密 start**/
        $iv = "1234567890123412";//16位 向量
        $key= '201707eggplant99';//16位 默认秘钥
        $aAccount=trim(openssl_decrypt(base64_decode($aAccount),"AES-128-CBC",$key,OPENSSL_RAW_DATA,$iv));
        $aPassword=trim(openssl_decrypt(base64_decode($aPassword),"AES-128-CBC",$key,OPENSSL_RAW_DATA,$iv));
        /**解密 end**/
        if (empty($aRegVerify)) {
            $this->apiError('请输入验证码');
        }
        $code=UserVerify::checkVerify($aAccount,'mobile', $aRegVerify);
        switch($code){
            case 1:
                $uid=db('user')->where('phone',$aAccount)->where('status',1)->find();
                if($aPassword==''){
                    $this->apiError('请输入密码');
                }
                if(preg_match('/^[0-9a-z_$]{6,14}$/i',$aPassword)){
                    $data['pwd']=md5($aPassword);
                }else{
                    $this->apiError('密码不符合要求，请重新设置');
                }
                $data['is_password']=1;
                $result = UserModel::where('uid',$uid['uid'])->update($data); //状态码是1时候登录成功
                if ($result !== false) {
                    $this->apiSuccess('密码修改成功');
                } else {
                    $this->apiError('密码修改失败');
                }
                break;
            case -1:
                $data['is_exit']=-1;
                $data['info']='短信验证码错误';
                $this->apiError($data);
                break;
            case -2:
                $data['is_exit']=-2;
                $data['info']='短信验证码已过期';
                $this->apiError($data);
                break;
        }

    }

    /**
     * 忘记密码时发送短信验证码
     * @author 姚林锋
     * @date 2019/2/25 11:08
     */
    /*public function userPasswordSms(){
        if(is_post()){
            $account = input('post.account', '', 'text');
            $res = UserModel::getUserByPhone($account);
            if($res){
                $result = FlyPigeno::sendSMS($account, '',2);
                $this->apiSuccess('发送成功');
            }else{
                $this->apiSuccess('发送失败');
            }
        }
    }*/

    /**
     * 规则说明
     *time 2019/10/17 16:31
     *author 181299251@qq.com
     */
    public function desc()
    {
        $type=osx_input('type','','text');
        $this->_needLogin();
        $desc = db('system_grade_desc')->where('type',$type)->value('description') ;
        $this->apiSuccess($desc) ;
    }

    public function jifentype()
    {
        $jifentype = db('system_rule')->where('status',1)->select();
        return $this->apiSuccess($jifentype);
    }

    /**
     * 任务
     *time 2019/10/17 16:30
     *author 181299251@qq.com
     */
    public function renwu()
    {
        $leixing=osx_input('leixing','','text');
        $this->_needLogin();
        $user_id = get_uid() ;
        $desc = db('system_renwu')->where('leixing',$leixing)->where('status',1)->where('is_del',0)->select() ;
        if($leixing == 4){
            foreach ($desc as $key => $item) {
                $desc[$key]['jifenflag'] = $item['jifenflag'] ;
                $owner = db('zidingyi_renwu')->where('uid',$user_id)->where('jifenflag',$item['jifenflag'])->find();
                $desc[$key]['finished'] = empty($owner) ? 0 : 1 ;
            }
        }else{
            foreach ($desc as $key => $item) {
                $temp = $this->taskprocess($item['jifenflag']) ;
                $desc[$key][$item['jifenflag']] = $temp ;
            }
        }

        $this->apiSuccess($desc) ;
    }

    //自定义任务
    public function zidingyi()
    {
        $jifenflag=osx_input('jifenflag','','text');
        $url=osx_input('url','','text');
        $this->_needLogin();
        $user_id = get_uid() ;
        $jifenflag = urldecode($jifenflag) ;
        $owner = db('zidingyi_renwu')->where('uid',$user_id)->where('jifenflag',$jifenflag)->find();
        if(!empty($owner)){

            $this->apiSuccess('10000') ;
        }else{
            $data = [
                'uid' => $user_id,
                'jifenflag' => $jifenflag,
                'url' => $url,
                'create_time' => time(),
            ] ;
            db('zidingyi_renwu')->insert($data);
            //完成任务加分
            Gong::finishzidingyi($jifenflag) ;
            $this->apiSuccess('20000') ;
        }


    }

    //任务进度
    private function taskprocess($type)
    {
        $uid = get_uid() ;
        //发帖
        if($type == 'fatie'){
            $count= db('com_thread')->where('author_uid',$uid)->whereTime('create_time',date('Y-m-d'))->count();
            return $count ;
        }
        //点赞
        if($type == 'dianzan'){
            $count= db('support')->where('uid',$uid)->whereTime('create_time',date('Y-m-d'))->count();
            return $count ;
        }
        //评论
        if($type == 'pinglun'){
            $count= db('com_post')->where('author_uid',$uid)->whereTime('create_time',date('Y-m-d'))->where('is_thread',0)->count();
            return $count ;
        }
        //收藏
        if($type == 'shoucang'){
            $count= db('collect')->where('uid',$uid)->whereTime('create_time',date('Y-m-d'))->count();
            return $count ;
        }
        //下单数
        if($type == 'xiadanshu'){
            $count = db('week_order_task')->whereTime('start','<=',time())->whereTime('end','>=',time())->where('uid',$uid)->value('nums') ;
            return $count ;
        }
        //购物总额
        if($type == 'gouwujine'){
            $count = db('week_order_task')->whereTime('start','<=',time())->whereTime('end','>=',time())->where('uid',$uid)->sum('total') ;
            return $count ;
        }
        //关注
        if($type == 'guanzhu'){
            $count = db('user_follow')->whereTime('create_time',date('Y-m-d'))->where('uid',$uid)->where('status',1)->count();
            return $count ;
        }
        if($type == 'genghuantouxiang'){
            $wan = db('user_wanshan')->where('uid',$uid)->where('status',2)->find();
            return empty($wan) ? 0 : 1 ;
        }
        if($type == 'tianxieziliao'){
            $wan = db('user_wanshan')->where('uid',$uid)->where('status',3)->find();
            return empty($wan) ? 0 : 1 ;
        }
        //收次发帖
        if($type == 'shoucifatie'){
            $count = db('com_thread')->where('author_uid',$uid)->count();
            return intval($count) >0  ? 1 : 0 ;
        }
        //首次点赞
        if($type == 'shoucidianzan'){
            $count = db('support')->where('uid',$uid)->count();
            return intval($count) >0  ? 1 : 0 ;
        }
        //收次评论
        if($type == 'shoucipinglun'){
            $count = db('com_post')->where('author_uid',$uid)->count();
            return intval($count) >0  ? 1 : 0 ;
        }
        //收次发帖
        if($type == 'shoucishoucang'){
            $is_collect = db('user')->where('uid',$uid)->value('is_collect');
            return intval($is_collect) == 1  ? 0 : 1 ;
        }

    }

    /**
     * 签到
     *author 181299251@qq.com
     */
    public function qiandao()
    {

        $this->_needLogin();
        $user_id = get_uid() ;
        $date = date('Y-m-d') ;
        $today = db('qiandao')->where('time',$date)->where('user_id',$user_id)->find();
        if(!empty($today)){
            $this->apiFailed('今日已签到') ;
        }

        //今日签到
        $yesterday = date("Y-m-d",strtotime("-1 day")) ;
        $qiandao = db('qiandao')->where('time',$yesterday)->where('user_id',$user_id)->find();
        $qiandaonums = 0 ;
        if(empty($qiandao)){
            $data = [
                'time' => $date,
                'user_id' => $user_id,
                'cishu' => 1
            ] ;
            db('qiandao')->insert($data);
            $qiandaonums = 1 ;
        }else{
            if($qiandao['cishu']==7){
                $data = [
                    'time' => $date,
                    'user_id' => $user_id,
                    'cishu' => 1
                ] ;
                db('qiandao')->insert($data);
                $qiandaonums = 1 ;
            }else{
                $data = [
                    'time' => $date,
                    'user_id' => $user_id,
                    'cishu' => intval($qiandao['cishu']) +1
                ] ;
                db('qiandao')->insert($data);
                $qiandaonums = intval($qiandao['cishu']) +1 ;
            }

        }
        $jifen = db('system_jifen')->where('id',$qiandaonums)->find();

        $jifentype = db('system_rule')->where('status',1)->order('id asc')->select();
        $qianArr = [] ;
        foreach ($jifentype as $k=>$item) {
            if ($item['flag'] =='one') {
                $qianArr[$k]['one'] = $jifen['firstone'];
                $qianArr[$k]['max'] = $jifen['firstmax'];
            } else {
                $qianArr[$k]['one'] = $jifen[$item['flag'].'one'];
                $qianArr[$k]['max'] = $jifen[$item['flag'].'max'];
            }
            $qianArr[$k]['name']=$item['name'];
        }
        Support::qiandaoaddjifen($jifen,$user_id) ;
        $data = [
            'msg' => '签到成功',
            'jifen' => $qianArr
        ] ;
        $user_name=UserModel::where('uid',$user_id)->value('nickname');
        WechatTemplateService::sendTemplate(WechatUser::uidToOpenid($user_id),WechatTemplateService::CHICK_IN, [
            'first'=>'签到成功',
            'keyword1'=>$user_name,
            'keyword2'=>date("Y-m-d H:i:s",time()),
            'keyword3'=>'正常',
            'remark'=>'如果不是您操作，请及时联系网站管理员!'
        ],'');

        website_connect_notify($user_id,0,0,'osapi_user_qiandao');//通知第三方平台，任务回调
        $this->apiSuccess($data) ;

    }

    public function signday()
    {
        $this->_needLogin();
        $user_id = get_uid() ;
        $date = date('Y-m-d') ;
        $dateyes = date('Y-m-d',strtotime("-1 day")) ;
        $today = db('qiandao')->where('time',$date)->where('user_id',$user_id)->find();
        $yesterday = db('qiandao')->where('time',$dateyes)->where('user_id',$user_id)->find();
        //没有签到过，返回0
        if(empty($today) && empty($yesterday)){
            $this->apiSuccess(0) ;
        }
        //今日已签到,返回今日的
        if(!empty($today)){
            $this->apiSuccess($today['cishu']) ;
        }
        //昨日签到，返回昨日的
        if(!empty($yesterday)){
            $this->apiSuccess($yesterday['cishu']) ;
        }

    }


    /**
     * 用户手机号码注册之后完善个人信息
     * 更新内容包括昵称，性别
     * @author 姚林锋 ylf@ourstu.com
     * @date 2018/12/29 16:34
     */
    public function updateUserInfo()
    {
        $uid=$this->_needLogin();
        if (is_post()) {
            $nickName = input('post.nickname', '', 'text');
            $sex = input('post.sex/d', 0);
            $this->_checkNickname($nickName); //判断用户昵称是否过长或者字符不符合要求
            $res = UserModel::update([ //将用户完善的信息更新入库
                'nickname' => $nickName,
                'sex' => $sex,
            ], ['uid' => $uid]);
            if ($res) {
                //首次更换头像加分
                Gong::bindfirst('tianxieziliao',3) ;
                Cache::rm('user_info_'.$uid);
                $this->apiSuccess('上传成功');
            }
            $this->apiError('上传失败');
        }
    }

    /**
     * 更新用户头像
     * @author 郑钟良(zzl@ourstu.com)
     * @date slf
     */
    public function updateAvatar()
    {
        $uid=$this->_needLogin();
        $aData = input('post.file','','text');
        $file=File::uploadAvatar($aData);
        if (strpos($_SERVER['HTTP_USER_AGENT'], 'miniprogram') !== false) {
            $filePath=ROOT.'/public/upload/tmp'.rand(1000,9999).'.png';
            file_put_contents($filePath, $aData);
            $obj = new \CURLFile(realpath($filePath));
            $obj->setMimeType("image/jpeg");
            $file['media'] = $obj;
            $token=Cache::get('miniprogram_token');
            if(!$token){
                $appId = SystemConfig::getValue('routine_appId');
                $appSecret = SystemConfig::getValue('routine_appsecret');
                $wx = new WechatAuth($appId,$appSecret);
                /* 获取请求信息 */
                $token= $wx->getAccessToken();
                Cache::set('miniprogram_token',$token,7200);
            }
            $url = "https://api.weixin.qq.com/wxa/img_sec_check?access_token=".$token['access_token'];
            $info = $this->http_request($url,$file);
            $info =  json_decode($info,true);
            if($info['errcode']==87014){
                $res['path']=get_domain().'/public/system/images/gl.jpg';
            }
            unlink($filePath);
        }
        if($file==false){
            $this->apiError(File::getError());
        }else{
            $res = UserModel::setAvatar($file['path']);
            if($res==false){
                $this->apiError(File::getError());
            }else{
                //首次更换头像加分
                Gong::bindfirst('genghuantouxiang',2);
                $map['is_avatar']=1;
                UserModel::where('uid',$uid)->update($map);
                Cache::rm('user_info_'.$uid);
                $this->apiSuccess($res);
            }
        }
    }

    /**
     * 获取随机推荐的用户，每次默认四个，一次不到时查取会进行递归选取其他推荐方式进行查取
     * 所有方式都用过后仍不足四个则结束while循环
     * @author 郑钟良(zzl@ourstu.com)
     * @date slf
     */
    public function recommendUser()
    {
        $recommendUser=[];
        $this->apiSuccess($recommendUser);
        $userNum = input('post.user_num/d', 4); //推荐用户数，默认为四个，因为在不同地方调用，但是选出的用户数是不同的
        $user = get_uid();
        if (!$user) {
            $user = 1;
        }
        $this->recommend = $this->config->getRecommendConf(); //获取配置表中的推荐方式
        $userCount = 0;
        $ids = [];
        while ($userCount < $userNum) { //当选出的用户数小于需要的推荐用户数时继续执行
            $way = $this->_recommendWay($this->recommend); //从推荐方式中按权重随机选取一种
            $recommendUser[] = $this->_recommendByWay($way, $user, $this->recommend, $ids); //根据该方式选择对应的方式查取用户
            if ($recommendUser[count($recommendUser) - 1] == 'over') { //全部推荐方式都用完则强制结束while循环，无论是否达到需要的用户数量
                break;
            }
            foreach ($recommendUser as $k => &$v) {
                $ids[] = $v['uid']; //将推荐出来的用户id存入一个数组
            }
            unset($v);
            $ids = array_unique($ids); //一次推荐的用户不能重复
            $userCount = count($recommendUser);
            $this->recommendUser = $recommendUser; //已经放入数组的推荐用户，该数组是全局的，便于其他方法调用该数组
        }
        $this->apiSuccess($recommendUser);
    }

    /**
     * 退出登录
     */
    public function logout(){
        $uid=$this->_needLogin();
        $token=db('os_token')->where('uid',$uid)->value('token');
        cache($token,null);
        db('os_token')->where('uid',$uid)->delete();
        $this->apiSuccess('退出登录成功');
    }

    /**
     * 我的页面
     */
    public function my()
    {
        $uid = $this->_needLogin();
        $member = db('user')->where('uid',$uid)->field('uid,nickname,avatar,fans,follow,post_count')->find();
        $member['avatar_64']=thumb_path($member['avatar'],64,64);
        $member['avatar_128']=thumb_path($member['avatar'],128,128);
        $member['avatar_256']=thumb_path($member['avatar'],256,256);
        $member['post_count']=db('com_thread')->where('author_uid',$member['uid'])->where('status',1)->count();
        $notice=db('user_notice')->where('uid',$uid)->count();
        $notice_see=db('user_notice_see')->where('uid',$uid)->count();
        $message = Message::getMessageCount();
        $member['no_see_notice']=$notice-$notice_see+$message;
        $this->apiSuccess($member);
    }

    /**
     * 我的粉丝页面
     */
    public function myFans()
    {
        $uid = input('post.uid/d', 0);
        !$uid && $uid = $this->_needLogin();
        $page = input('post.page', 1);
        $row = input('post.row', 10);
        $fans =UserFollow::getFansList($uid,$page,$row);
        $map=[
            'follow_uid'=>$uid,
            'status'=>1
        ];
        $count=db('user_follow')->where($map)->count();
        $this->apiSuccess(['list'=>$fans,'count'=>$count]);
    }

    /**
     * 我的关注页面
     */
    public function myFollow()
    {
        $uid = input('post.uid/d', 0);
        !$uid && $uid = $this->_needLogin();
        $page = input('post.page', 1);
        $row = input('post.row', 10);
        $follow['user'] =UserFollow::getFollowList($uid,$page,$row);
        $follow['forum'] =ComForumMember::getUserFollow($uid,$page,$row);
        $this->apiSuccess($follow);
    }

    /**
     * 我的帖子页面
     */
    public function myPost()
    {
        $uid = input('post.uid/d', 0);
        !$uid && $uid = $this->_needLogin();
        $page = input('post.page', 1);
        $row = input('post.row', 10);
        $type = input('post.type', 0);
        switch ($type){
            case 'post':
                $postList = ComThread::getUserThreadList($uid,$page,$row,$type=1);
                break;
            case 'weibo':
                $postList = ComThread::getUserThreadList($uid,$page,$row,$type=2);
                break;
            case 'ucard':
                $postList = ComThread::getUserThreadList($uid,$page,$row,$type=3);
                break;
            case 'video':
                $postList = ComThread::getUserThreadList($uid,$page,$row,$type=6);
                break;
            case 'news':
                $postList = ComThread::getUserThreadList($uid,$page,$row,$type=4);
                break;
            default:
                $postList = ComThread::getUserThreadList($uid,$page,$row,$type=1);
                break;
        }
        $this->apiSuccess($postList);
    }

    /**
     * 我的收藏页面
     */
    public function myCollect()
    {
        $uid = $this->_needLogin();
        $page = input('post.page', 1);
        $row = input('post.row', 10);
        $type = input('post.type', 'post');
        $postList = ComThread::getPostCollect($uid,$page,$row,'create_time desc',$type);
//        switch ($type){
//            case 'post':
//                $postList = ComThread::getPostCollect($uid,$page,$row);
//                break;
//            case 'video':
//                //todo
//                break;
//            default:
//                $postList = ComThread::getPostCollect($uid,$page,$row);
//                break;
//        }
        $this->apiSuccess($postList);
    }

    /**
     * 个人中心头部用户信息
     * @author 郑钟良(zzl@ourstu.com)
     * @date slf
     */
    public function infoGet()
    {
        $uid = $this->_needLogin();
        $member = UserModel::getUserInfo($uid);
        $date = date("Y-m-d") ;
        $today = db('qiandao')->where('time',$date)->where('user_id',$uid)->find();
        $flag = empty($today) ? 0 : 1 ;
        $member['qiandao'] = $flag ;
        $this->apiSuccess($member);
    }

    public function usergrade()
    {
        $uid = $this->_needLogin();
        $user = UserModel::where('uid',$uid)->field('exp')->find() ;
        $grade = UserModel::cacugrade($user['exp']) ;
        $total = db('store_order')->where('uid',$uid)->where('paid',1)->sum('total_price');
        $mallgrade = $this->cacumallgrade($total) ;
        $data = [
            'usergrade' => $grade,
            'mallgrade' => $mallgrade,

        ] ;
        $this->apiSuccess($data);
    }

    private function cacumallgrade($exp)
    {
        $experience = db('system_mall_grade')->order('experience','asc')->select();
        $count = count($experience) ;
        foreach ($experience as $key => $item) {

            if( floatval($exp) <  floatval($item['experience']) && $key == 0){

                return $item ;
            }elseif(floatval($exp) >= floatval($item['experience']) && $count == $key + 1){
                //达到顶级了

                return $item;
            }elseif (floatval($exp) >= floatval(($item['experience'])) && floatval($exp)< floatval($experience[$key+1]['experience'] )){

                return $experience[$key+1] ;
            }
        }
    }

    private function _recommendByWay($way, $uid, $recommend, $hasIds = null)
    {
        $user = '';
        switch ($way) {
            case 'recommend_forumer':  //随机方式为推荐版主时
                $recommendUser = $this->forum->getRecommendUser($uid, $hasIds); //$hasIds是已经选出来的用户，查询时要排除掉这部分用户
                $recommendUser = $this->_newRecommend($recommendUser, $recommend, $way, $uid, $hasIds);
                //若$recommendUser为空则说明该方式查询不到用户，去掉该方式，重新选取方式进行查询，此时开始递归查询
                $user = $recommendUser;
                break;
            case 'same_label': //随机方式相同标签时
                $recommendUser = $this->tagsRel->getRecommendUser($uid, $hasIds); //$hasIds是已经选出来的用户，查询时要排除掉这部分用户
                $recommendUser = $this->_newRecommend($recommendUser, $recommend, $way, $uid, $hasIds);
                $user = $recommendUser;
                break;
            case 'celebrity_recommend': //随机方式为名人推荐时
                $recommendUser = $this->ucInfo->getRecommendUser($uid, $hasIds); //$hasIds是已经选出来的用户，查询时要排除掉这部分用户
                $recommendUser = $this->_newRecommend($recommendUser, $recommend, $way, $uid, $hasIds);
                $user = $recommendUser;
                break;
            case 'handle_recommend': //随机方式为手动后台推荐时
                $recommendUser = $this->ucInfo->getUserByHandle($uid, $hasIds); //$hasIds是已经选出来的用户，查询时要排除掉这部分用户
                $recommendUser = $this->_newRecommend($recommendUser, $recommend, $way, $uid, $hasIds);
                $user = $recommendUser;
                break;
        }
        return $user;
    }

    /**
     * 从推荐方式数组中按权重随机选取一种方式
     * 若oldWay不为空，则为oldWay方式查取不到用户，开始进行第一次递归查询
     * @param $recommend
     * @param string $oldWay
     * @return int|string
     * @author 姚林锋 ylf@ourstu.com
     * @date 2018/12/29 16:23
     */
    private function _recommendWay($recommend, $oldWay = '')
    {
        $rand = null;
        if ($oldWay != '') {
            $newRecommend = $this->_recommendContent($recommend, $oldWay); //删除旧方式，获取一个新的推荐方式数组
            $rand = $this->_recommendWayTran($newRecommend); //获取各个方式的权重
        } else {
            $rand = $this->_recommendWayTran($recommend); //获取各个方式的权重
        }
        $way = get_rand($rand); //根据随机到的概率，随机选取方式
        return $way;
    }

    /**
     * oldWay方式下查取不到用户，将recommend数组中的oldWay方式去掉后再去随机选取新方式进行查取
     * @param $recommend 存储配置表中推荐方式的数组
     * @param $oldWay 旧的推荐方式
     * @return mixed
     * @author 姚林锋 ylf@ourstu.com
     * @date 2018/12/29 16:21
     */
    private function _recommendContent($recommend, $oldWay)
    {
        foreach ($recommend as $k => $value) {
            if ($k == $oldWay) {
                unset($recommend[$k]); //删除该方式，因为该方式找不到用户，避免再随机到该方式进行查询
            }
        }
        return $recommend;
    }

    /**
     * 将推荐方式数组转化为符合随机选取要求的数组
     * @param $recommend
     * @return null
     * @author 姚林锋 ylf@ourstu.com
     * @date 2018/12/29 16:26
     */
    private function _recommendWayTran($recommend)
    {
        $rand = null;
        foreach ($recommend as $k => &$v) {
            if ($k != 'handle_recommend') { //handle_recommend手动推荐方式有点不同，单独处理
                $rand[$k] = intval($v['value']) * 100;
            } else {
                $rand[$k] = intval($v['value']['weight']) * 100;
            }
        }
        unset($v);
        return $rand;
    }

    /**
     * 每次查取用户后会调用，若查取出来的用户为Null则进行递归查询
     * 若推荐方式数组也为null,说明所有方式都用尽，返回over结束递归和while
     * @param $recommendUser
     * @param $recommend
     * @param $way
     * @param $uid
     * @param $hasIds
     * @return string
     * @author 姚林锋 ylf@ourstu.com
     * @date 2018/12/29 16:29
     */
    private function _newRecommend($recommendUser, $recommend, $way, $uid, $hasIds)
    {
        if ($recommendUser == null) {
            $this->recommend = $this->_recommendContent($recommend, $way);
            //更新推荐方式数组，把查取不到用户的推荐方式从数组中去掉，避免继续随机到该方式进行查取
            if ($this->recommend == null) { //查询方式存在全局数组中，若数组变成null时，说明可供选取的方式已用完，结束所有递归
                return 'over';
            }
            $newWay = $this->_recommendWay($this->recommend, $way); //获取新的推荐用户方式
            $recommendUser = $this->_recommendByWay($newWay, $uid, $this->recommend, $hasIds); //获取该方式下的查询到的用户，若为空则继续递归查询
        }
        return $recommendUser;
    }

    /**
     * 检测昵称合法性
     * @param $nickname
     * @return bool
     * @author 郑钟良(zzl@ourstu.com)
     * @date slf
     */
    private function _checkNickname($nickname)
    {
        if (!isset($nickname)) {
            $this->apiError('用户昵称不能为空！');
        }
        $length = mb_strlen($nickname, 'utf-8'); // 当前数据长度
        if ($length > 6) {
            $this->apiError('用户昵称字符长度不能超过6');
        }
        $sensitive=Sensitive::sensitive($nickname,'用户名');
        if($sensitive['status']==0){
            $this->apiError('内容包含敏感词，请检查后重新输入');
        }
        $uid = UserModel::where(['nickname'=>$nickname,'status'=>1])->value('uid');
        if ($uid) {
            if($uid!=get_uid()){
                $this->apiError('用户昵称已存在');
            }
        }
        preg_match('/^(?!_|\s\')[A-Za-z0-9_\x80-\xff\s\']+$/', $nickname, $result);
        if (!$result) {
            $this->apiError('昵称包含特殊字符');
        }
        return true;
    }

    /**
     * 关注或取消关注用户
     * @author 郑钟良(zzl@ourstu.com)
     * @date slf
     */
    public function follow()
    {
        $self_uid=$this->_needLogin();
        $uid = input('post.uid/d', 0); //被关注用户uid
        if ($uid == $self_uid) {
            $this->apiError('不能关注自己');
        }
        $is_black=Blacklist::isBlack($uid,$self_uid);
        if ($is_black) {
            $this->apiError('由于对方的权限设置，您无法进行该操作');
        }
        $res=UserFollow::doFollow($uid);
        if($res){
            ComThread::setListCache($uid);
            Cache::rm('user_info_'.$uid);
            Cache::rm('add_follow_uid_'.$uid);
            Cache::rm('user_info_'.$self_uid);
            Cache::rm('user_rank_list_all'.$self_uid);
            Cache::rm('user_rank_list_week'.$self_uid);
            Cache::rm('com_index_top'.$self_uid);
            Cache::clear('thread_rank_list'.$self_uid);
            $this->apiSuccess('操作成功！');
        }else{
            $this->apiError('操作失败！'.UserFollow::getErrorInfo());
        }
    }

    /**
     * 用户签到信息页
     */
    public function forum_member_check()
    {
        $uid = $this->_needLogin();
        $user=db('user')->where(array('uid'=>$uid))->find();
        $count = UserRank::memberCheck($uid); //获取用户排名和签到数、累签数和更新时间
        $user = array_merge($user,$count); //将签到信息合并到用户信息中
        $this->apiSuccess($user);
    }

    /**
     * 用户签到
     */
    public function forum_member_checkIn()
    {
        $uid = $this->_needLogin();
        $re = UserRank::memberCheckIn($uid); //签到操作，连签数和累签数变化
        if ($re) {
            UserTaskNew::newCheck($uid); //新手签到任务
            UserTaskDay::dayCheck($uid); //每日签到任务
            $this->apiSuccess('签到成功');
        } else {
            $this->apiError('签到失败');
        }
    }

    /**
     * 签到列表，根据type判断是今日榜还是累签榜
     */
    public function forum_check_list()
    {
        $page=osx_input('post.page',1,'intval');
        $row=osx_input('post.row',10,'intval');
        $type = input('post.type/d', 0);
        $list = UserRank::getCheckList($type, $page, $row); //获取签到列表，根据type区分是累签列表还是今日签到列表
        $this->apiSuccess($list);
    }

    /**
     * 是否存在电话号码
     * @author zxh  zxh@ourstu.com
     *时间：2019.10.25
     */
    public function existPhone(){
        $account = input('post.phone', '', 'text');
        /**解密 start**/
        $iv = "1234567890123412";//16位 向量
        $key= '201707eggplant99';//16位 默认秘钥
        $phone=trim(openssl_decrypt(base64_decode($account),"AES-128-CBC",$key,OPENSSL_RAW_DATA,$iv));
        /**解密 end**/
        $user=UserModel::checkExist($phone);
        if($user){
            $data['is_exit']=1;
            $data['info']='存在用户';
        }else{
            $data['is_exit']=0;
            $data['info']='不存在用户';
        }
        $this->apiSuccess($data);
    }

    /**
     * 获得邀请码
     * @author zxh  zxh@ourstu.com
     *时间：2019.10.25
     */
    public function getInviteCode(){
        $uid=get_uid();
        if(!$uid) {
            $this->apiError('请先登录');
        }
        $code=InviteCode::getInviteCode($uid);
        $this->apiSuccess($code);
    }


    /**
     * 判断验证码是否通过
     * @author zxh  zxh@ourstu.com
     *时间：2019.12.13
     */
    public function checkInvite(){
        $code=input('code');
        $data['code']=InviteCode::getCode($code);
        $data['is_register']=InviteCode::checkCodeLogin($code);
        $this->apiSuccess($data);
    }

    /**
     * 获取个人中心底部版权
     * @author zxh  zxh@ourstu.com
     *时间：2020.1.17
     */
    public function copyRight()
    {
        $website_logo=SystemConfig::getValue('website_logo_show');
        $website_url =SystemConfig::getValue('website_url');
        $url='http://'.$_SERVER['SERVER_NAME'];
        $is_logo=$website_logo? true:false;
        $this->apiSuccess(['logo' => $url.$website_logo, 'website_url' =>$website_url,'is_logo'=>$is_logo]);
    }

    public function register_cache(){
        cache('is_submission','true',3*24*3600);
        $url='http://'.$_SERVER['SERVER_NAME'];
        $this->apiSuccess(['url' => $url]);
    }

    /**
     * 小名片信息
     * @author zxh  zxh@ourstu.com
     *时间：2019.09.20
     */
    public function userCard()
    {
        $uid=osx_input('uid',0,'intval');
        $now_uid=get_uid();
        if (!$uid){
            $uid=$now_uid;
            //$this->apiError('请获传入查看用户uid');
        }
        //记录查看个人信息记录
        if($now_uid>0){
            UserVisit::addVisitUser($uid,$now_uid);
        }

        $data['user'] = UserModel::getUserInfo($uid);
        $data['is_me'] =$uid==$now_uid?1:0;
        if (!$data['is_me']) {  //若当前查看用户不是自己时候时，判断当前用户是否关注过作者
            $data['is_follow'] = UserFollow::isFollow($now_uid,$uid);
            $data['is_black'] = Blacklist::isBlack($now_uid,$uid);
        }
        $data['visit_history'] = UserVisit::getUserVisitList(['uid' => $uid], 1, 5);
        $data['visit_support'] = UserVisit::getSupportCount($uid);
        $data['forum_count'] = ComThread::getForumCount($uid);
        $data['my_picture']=UserVisit::getPicture($uid);
        $this->apiSuccess($data);
    }

    /**
     * 编辑小名片信息
     * @author zxh  zxh@ourstu.com
     *时间：2019.09.19
     */
    public function editCard(){
        $signature=osx_input('signature','','text');
        $picture=osx_input('picture','','text');
        $now_uid = $this->_needLogin();
        $sensitive=Sensitive::sensitive($signature,'个性签名');
        if($sensitive['status']==0){
            $this->apiError('内容包含敏感词，请检查后重新输入');
        }
        $res=db('user')->where(['uid'=>$now_uid])->update(['signature'=>$signature]);
        $res2=UserVisit::addPicture($now_uid,$picture);
        if($res2!==false&&$res!==false){
            website_connect_notify($now_uid,0,0,'osapi_user_editCard');//通知第三方平台，任务回调
            //清除缓存
            Cache::rm('user_info_'.$now_uid);
            $this->apiSuccess('编辑个人信息成功');
        }else{
            $this->apiError('编辑个人信息失败');
        }
    }
    /**
     * 举报帖子
     * @author zxh  zxh@ourstu.com
     *时间：2019.09.25
     */
    public function reportUser(){
        $uid = $this->_needLogin();
        $data['uid']=$uid;
        $data['to_uid']=input('to_uid',0);
        if(!$data['to_uid']){
            $this->apiError('请选择举报用户');
        }
        $is_report=db('user_report')->where(['uid'=>$uid,'to_uid'=>$data['to_uid'],'is_deal'=>0])->count();
        if($is_report>0){
            $this->apiError('该用户你已经举报过了,管理员正在努力处理中');
        }
        $data['reason']=input('reason',0);
        $data['other_reason']=input('other_reason',0);
        if(!$data['reason']&&!$data['other_reason']){
            $this->apiError('请选择举报理由');
        }
        $data['create_time']=time();
        $data['status']=1;
        $data['is_deal']=0;
        $data['type']=4;
        $res=Report::addUserReport($data);
        if($res){
            //累计投诉更新
            Report::reportCount($data['to_uid']);
            $this->apiSuccess('举报成功');
        }else{
            $this->apiError('举报失败');
        }
    }

    public function UserBindInfo(){
        $uid=get_uid();
        $data['phone']=UserModel::where('uid',$uid)->value('phone');
        $openid=db('user_sync_login')->where('uid',$uid)->value('open_id');
        if($openid){
            $nickname=Cache::get('user_weixin_nickname'.$uid);
            if(!$nickname){
                $appId = SystemConfig::getValue('wechat_appid');
                $appSecret = SystemConfig::getValue('wechat_appsecret');
                $wx = new WechatAuth($appId, $appSecret);
                /* 获取请求信息 */
                $token= $wx->getAccessToken();
                $token['openid']=$openid;
                $get_user_info_url = "https://api.weixin.qq.com/cgi-bin/user/info?access_token=".$token['access_token']."&openid=".$token['openid']."&lang=zh_CN";
                $userinfo = $this->http_curl($get_user_info_url);
                $nickname=$userinfo['nickname'];
                Cache::set('user_weixin_nickname'.$uid,$nickname,60*60*48);
            }
            $data['weixin']=$nickname;
        }else{
            $data['weixin']='';
        }
        $this->apiSuccess($data);
    }

    private function http_curl($url){//用curl传参
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch,CURLOPT_RETURNTRANSFER,1);//关闭ssl验证
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
        curl_setopt($ch,CURLOPT_HEADER, 0);
        $output = curl_exec($ch);
        curl_close($ch);
        return json_decode($output, true);
    }

    /**
     * @api      {get} /commonapi/Certification/faq_list.html 问题列表
     * @apiGroup certification
     * @apiName  faq_list
     * @apiParam {Number} page 页码
     * @apiParam {Number} page_num 每页数量
     * @apiParam {json} info
     * @apiParamExample {json} Request-Example:
     * {"page":"1","page_num":"20"}
     */
    public function faq_list()
    {
        $params['page']=input('post.page/d',1);
        $params['page_num']=input('post.row/d',10);
        $list = FaqModel::getApiPage($params);
        $this->apiSuccess($list);
    }
    /**
     * @api      {get} /commonapi/Certification/faq/id/1.html 问题详情
     * @apiGroup certification
     * @apiName  faq
     * @apiParam {Number} id id
     * @apiSuccess {json} result
     */
    public function faq()
    {
        $id=input('post.id/d','');
        $data = FaqModel::get($id);
        $this->apiSuccess($data);
    }

    /**
     * 申请注销
     */
    public function apply_cancellation(){
        $uid=$this->_needLogin();
        $prohibit=db('report')->where('status',1)->where('to_uid',$uid)->where('prohibit_time','>',time())->find();
        $user=db('user')->where('uid',$uid)->where('status',0)->find();
        if($prohibit||$user){
            $this->apiError('账号处在禁言/禁用状态，暂无法注销');
        }
        $shop=db('shop_order')->where('status','in',array(-1,1,2))->where('uid',$uid)->find();
        $store=db('store_order')->where('status','in',array(-1,0,1,2))->where('uid',$uid)->where('is_del',0)->find();
        if($shop||$store){
            $this->apiError('账号内有未完成订单，暂无法注销');
        }
        $report=db('report')->where('is_deal',0)->where('to_uid',$uid)->find();
        if($report){
            $this->apiError('账号内有未处理的举报记录，暂无法注销');
        }
        $weixin=db('user_sync_login')->where('uid',$uid)->find();
        if($weixin){
            $this->apiError('账号仍绑定微信，暂无法注销');
        }
        $shell=db('sell')->where('uid',$uid)->where('status',1)->value('has_income');
        if($shell){
            if($shell>0){
                $this->apiError('账号还有可提现收益，暂无法注销');
            }
        }
        $cash=db('cash_out')->where('uid',$uid)->where('status','in',array(1,2))->find();
        if($cash){
            $this->apiError('账号还有推广的收益提现记录没有完成，暂无法注销');
        }
        $this->apiSuccess('可以注销');
    }

    /**
     * 账号注销
     */
    public function user_cancellation(){
        $uid=$this->_needLogin();
        $aAccount = input('post.phone', '', 'text');
        $aRegVerify = input('post.quick_verify', '','text');
        //这个key用于获取站点号
        /**解密 start**/
        $iv = "1234567890123412";//16位 向量
        $key= '201707eggplant99';//16位 默认秘钥
        $aAccount=trim(openssl_decrypt(base64_decode($aAccount),"AES-128-CBC",$key,OPENSSL_RAW_DATA,$iv));
        /**解密 end**/
        if (empty($aRegVerify)) {
            $this->apiError('请输入验证码');
        }
        $user_phone=UserModel::where('uid',$uid)->value('phone');
        if($user_phone!==$aAccount){
            $this->apiError('非法操作！');
        }
        $code=UserVerify::checkVerify($aAccount,'mobile', $aRegVerify);
        switch($code){
            case 1:
                $map['status']=2;
                $map['nickname']='匿名';
                $map['phone']='';
                $res=UserModel::where('phone',$aAccount)->update($map);
                if($res===false){
                    $data['info']='注销失败';
                    $this->apiError($data);
                }else{
                    $data['info']='注销成功';
                    $this->apiSuccess($data);
                }
                break;
            case -1:
                $data['info']='短信验证码错误';
                $this->apiError($data);
                break;
            case -2:
                $data['info']='短信验证码已过期';
                $this->apiError($data);
                break;
        }
    }

    private function http_request($url, $data = null)
    {
        $postUrl = $url;
        $curlPost = $data;
        $curl = curl_init();//初始化curl
        curl_setopt($curl, CURLOPT_URL,$postUrl);//抓取指定网页
        curl_setopt($curl, CURLOPT_HEADER, 0);//设置header
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);//要求结果为字符串且输出到屏幕上
        curl_setopt($curl, CURLOPT_POST, true);//post提交方式
        curl_setopt($curl, CURLOPT_POSTFIELDS,$curlPost);//提交的参数
        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);
        $data = curl_exec($curl);//运行curl
        curl_close($curl);

        return $data;
    }


    /**
     * 我发布的话题
     */
    public function my_send_topic(){
        $uid=$this->_needLogin();
        $page=input('post.page/d',1);
        $row=input('post.row/d',10);
        $list=Cache::get('user_send_topic_list_'.$page.'_'.$row.'_'.$uid);
        if(!$list){
            $list=ComTopic::UserSendTopicList($page,$row,$uid);
            Cache::tag('user_send_topic_list')->set('user_send_topic_list_'.$page.'_'.$row.'_'.$uid,$list,600);
        }
        $this->apiSuccess($list);
    }

    /**
     * 我关注的话题
     */
    public function my_follow_topic(){
        $uid=$this->_needLogin();
        $page=input('post.page/d',1);
        $row=input('post.row/d',10);
        $list=Cache::get('user_follow_topic_list_'.$page.'_'.$row.'_'.$uid);
        if(!$list){
            $list=ComTopic::UserfollowTopicList($page,$row,$uid);
            Cache::tag('user_follow_topic_list')->set('user_follow_topic_list_'.$page.'_'.$row.'_'.$uid,$list,600);
        }
        $this->apiSuccess($list);
    }
    /*
     * 判断用户状态
     */
    public function is_user_prohibit(){
        $uid=$this->_needLogin();
        if(!$uid){
            $data['status']=0;
            $data['info']='请先登录';
            $this->apiError($data);
        }
        $status=db('user')->where(['uid'=>$uid])->value('status');
        if($status!=1){
            $data['status']=0;
            $data['info']='账号禁用中';
            $this->apiError($data);
        }
        $is_prohibit=db('report')->where(['prohibit_time'=>['gt',time()],'status'=>1,'to_uid'=>$uid])->count();
        if($is_prohibit>=1){
            $data['status']=0;
            $data['info']='账号禁言中';
            $this->apiError($data);
        }
        $data['status']=1;
        $data['info']='账号正常';
        $this->apiSuccess($data);
    }

    /**
     * 获取用户的权限
     * @author zxh  zxh@ourstu.com
     *时间：2020.4.7
     */
    public function get_user_power(){
        $uid=$this->_needLogin();
        $power=Group::get_power_value($uid);
        $data['status']=1;
        $data['power']=$power;
        $this->apiSuccess($data);
    }

    /**
     * 邀请信息渲染
     * @author zxh  zxh@ourstu.com
     *时间：2020.4.28
     */
    public function invite_message(){
        $uid=$this->_needLogin();
        $invite_reward_remark=db('system_config')->where(['menu_name'=>'invite_reward_remark'])->field('value')->find();
        $data['invite_reward']=$invite_reward_remark['value'];
        $data['count']=db('invite_log')->where(['father_uid'=>$uid])->count();
        $data['score']=0;
        $log=db('invite_log')->where(['father_uid'=>$uid,'reward'=>['neq','']])->field('reward')->select();
        foreach ($log as $v){
            $score=json_decode($v['reward'],true);
            foreach ($score as $vo){
                if($vo['flag']=='fly'){
                    $data['score']=+intval($vo['value']);
                }
            }
        }
        unset($v);
        $this->apiSuccess($data);
    }

    /**
     *用户邀请记录
     * @author zxh  zxh@ourstu.com
     *时间：2020.5.9
     */
    public function get_invite_log(){
        $uid=$this->_needLogin();
        $page=input('post.page/d',1);
        $row=input('post.row/d',10);
        $data=InviteLog::where(['father_uid'=>$uid])->page($page,$row)->order('create_time desc')->select()->toArray();
        foreach ($data as &$item){
            $item['nickname']=db('user')->where('uid',$item['uid'])->value('nickname');
            $item['avatar']=db('user')->where('uid',$item['uid'])->value('avatar');
            $item['father_nickname']=db('user')->where('uid',$item['father_uid'])->value('nickname');
            $item['create_time']=time_format($item['create_time']);
        }
        $log['data']=$data;
        $log['count']=InviteLog::where(['father_uid'=>$uid])->count();
        $this->apiSuccess($log);
    }
}
